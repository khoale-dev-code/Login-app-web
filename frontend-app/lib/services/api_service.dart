import 'dart:convert';
import 'package:http/http.dart' as http;
import 'package:login_auth_flutter/models/user.dart';
import 'package:shared_preferences/shared_preferences.dart';
import 'package:flutter/foundation.dart';

/// Service g·ªçi API cho x√°c th·ª±c ng∆∞·ªùi d√πng v·ªõi debugging
class ApiService {
  static const String _baseUrl = 'http://localhost:3001/api/auth';

  /// Tr·∫£ v·ªÅ URL API theo n·ªÅn t·∫£ng
  static String getBaseUrl() {
    if (kIsWeb) return _baseUrl;

    switch (defaultTargetPlatform) {
      case TargetPlatform.android:
        return 'http://10.0.2.2:3001/api/auth';
      case TargetPlatform.iOS:
        return _baseUrl;
      default:
        return _baseUrl;
    }
  }

  /// X√°c ƒë·ªãnh chu·ªói n·ªÅn t·∫£ng (cho User-Agent)
  static String _getPlatformString() {
    if (kIsWeb) return 'web';
    switch (defaultTargetPlatform) {
      case TargetPlatform.android:
        return 'android';
      case TargetPlatform.iOS:
        return 'ios';
      case TargetPlatform.macOS:
        return 'macos';
      case TargetPlatform.windows:
        return 'windows';
      case TargetPlatform.linux:
        return 'linux';
      default:
        return 'unknown';
    }
  }

  /// Sinh headers m·∫∑c ƒë·ªãnh, k√®m token n·∫øu c·∫ßn
  static Future<Map<String, String>> _getHeaders({
    bool needsAuth = false,
  }) async {
    final headers = {
      'Content-Type': 'application/json',
      'User-Agent': 'FlutterApp/1.0 (${_getPlatformString()})',
    };

    if (needsAuth) {
      try {
        final prefs = await SharedPreferences.getInstance();
        final token = prefs.getString('access_token');
        if (token != null) {
          headers['Authorization'] = 'Bearer $token';
          debugPrint(
            'Token ƒë∆∞·ª£c th√™m v√†o header: ${token.substring(0, 20)}...',
          );
        } else {
          debugPrint('‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y token trong SharedPreferences');
        }
      } catch (e) {
        debugPrint('‚ö†Ô∏è L·ªói khi l·∫•y token: $e');
      }
    }
    return headers;
  }

  /// G·ªçi API ƒëƒÉng k√Ω
  static Future<bool> register(RegisterRequest request) async {
    final url = '${getBaseUrl()}/register';
    debugPrint('G·ªçi API Register: $url');

    try {
      final headers = await _getHeaders();
      debugPrint('Headers: $headers');

      final body = jsonEncode(request.toJson());
      debugPrint('Body: $body');

      final response = await http
          .post(Uri.parse(url), headers: headers, body: body)
          .timeout(const Duration(seconds: 30));

      debugPrint('Response status: ${response.statusCode}');
      debugPrint('Response body: ${response.body}');

      if (response.statusCode == 201) return true;

      final error = _extractError(response);
      throw Exception(error ?? 'ƒêƒÉng k√Ω th·∫•t b·∫°i');
    } on TimeoutException {
      throw Exception('H·∫øt th·ªùi gian ch·ªù. Vui l√≤ng th·ª≠ l·∫°i.');
    } catch (e) {
      debugPrint('L·ªói register: $e');
      if (e.toString().contains('XMLHttpRequest')) {
        throw Exception(
          'L·ªói m·∫°ng. H√£y ch·∫Øc ch·∫Øn backend ch·∫°y ·ªü http://localhost:3001',
        );
      }
      throw Exception('ƒêƒÉng k√Ω th·∫•t b·∫°i: ${_formatError(e)}');
    }
  }

  /// G·ªçi API ƒëƒÉng nh·∫≠p - Fixed cho Vietnamese backend
  static Future<LoginResponse> login(LoginRequest request) async {
    final url = '${getBaseUrl()}/login';
    debugPrint('üì§ G·ªçi API Login: $url');

    try {
      final headers = await _getHeaders();
      debugPrint('üìã Headers: $headers');

      final body = jsonEncode(request.toJson());
      debugPrint(' Body: $body');

      final response = await http
          .post(Uri.parse(url), headers: headers, body: body)
          .timeout(const Duration(seconds: 30));

      debugPrint('Response status: ${response.statusCode}');
      debugPrint('Response body: ${response.body}');

      if (response.statusCode == 200) {
        final data = jsonDecode(response.body);

        // L∆∞u token v√†o SharedPreferences
        final prefs = await SharedPreferences.getInstance();
        await prefs.setString('access_token', data['accessToken']);
        debugPrint('ƒê√£ l∆∞u access_token');

        // Refresh token c√≥ th·ªÉ kh√¥ng c√≥ trong response
        if (data['refreshToken'] != null) {
          await prefs.setString('refresh_token', data['refreshToken']);
          debugPrint(' ƒê√£ l∆∞u refresh_token');
        }

        // Parse user data theo format Vietnamese backend
        final userData = data['nguoiDung'] ?? data['user'];
        if (userData == null) {
          throw Exception('Kh√¥ng nh·∫≠n ƒë∆∞·ª£c th√¥ng tin ng∆∞·ªùi d√πng t·ª´ server');
        }

        // Convert Vietnamese field names to English for User model
        final userJson = {
          'id': userData['id'],
          'name': userData['hoTen'] ?? userData['name'] ?? '',
          'email': userData['email'] ?? '',
          'mobile': userData['soDienThoai'] ?? userData['mobile'] ?? '',
          'createdAt':
              userData['taoLuc'] ??
              userData['createdAt'] ??
              DateTime.now().toIso8601String(),
          'updatedAt':
              userData['capNhatLuc'] ??
              userData['updatedAt'] ??
              DateTime.now().toIso8601String(),
        };

        debugPrint('Converted user data: $userJson');

        return LoginResponse(
          accessToken: data['accessToken'],
          refreshToken: data['refreshToken'], // C√≥ th·ªÉ null
          user: User.fromJson(userJson),
        );
      }

      final error = _extractError(response);
      throw Exception(error ?? 'ƒêƒÉng nh·∫≠p th·∫•t b·∫°i');
    } catch (e) {
      debugPrint('L·ªói login: $e');
      throw Exception(_formatError(e));
    }
  }

  /// L·∫•y th√¥ng tin ng∆∞·ªùi d√πng - Fixed cho Vietnamese backend
  static Future<User> getUserDetails() async {
    final url = '${getBaseUrl()}/getUserDetails';
    debugPrint(' G·ªçi API getUserDetails: $url');

    try {
      // Ki·ªÉm tra token tr∆∞·ªõc khi g·ªçi API
      final prefs = await SharedPreferences.getInstance();
      final token = prefs.getString('access_token');
      debugPrint(
        'Token hi·ªán t·∫°i: ${token != null ? '${token.substring(0, 20)}...' : 'null'}',
      );

      final headers = await _getHeaders(needsAuth: true);
      debugPrint('Headers: $headers');

      final response = await http
          .get(Uri.parse(url), headers: headers)
          .timeout(const Duration(seconds: 30));

      debugPrint('Response status: ${response.statusCode}');
      debugPrint('Response body: ${response.body}');

      if (response.statusCode == 200) {
        final data = jsonDecode(response.body);

        final userData = data['nguoiDung'] ?? data['user'] ?? data;

        final userJson = {
          'id': userData['id'],
          'name': userData['hoTen'] ?? userData['name'] ?? '',
          'email': userData['email'] ?? '',
          'mobile': userData['soDienThoai'] ?? userData['mobile'] ?? '',
          'createdAt':
              userData['taoLuc'] ??
              userData['createdAt'] ??
              DateTime.now().toIso8601String(),
          'updatedAt':
              userData['capNhatLuc'] ??
              userData['updatedAt'] ??
              DateTime.now().toIso8601String(),
        };

        debugPrint('Converted user data: $userJson');
        return User.fromJson(userJson);
      }

      if (response.statusCode == 401 || response.statusCode == 403) {
        debugPrint('Token h·∫øt h·∫°n, th·ª≠ refresh...');
        // Token h·∫øt h·∫°n ‚Üí refresh r·ªìi g·ªçi l·∫°i
        final refreshed = await _refreshToken();
        if (refreshed) {
          debugPrint('‚úÖ Refresh token th√†nh c√¥ng, g·ªçi l·∫°i API...');
          final retryHeaders = await _getHeaders(needsAuth: true);
          final retry = await http
              .get(Uri.parse(url), headers: retryHeaders)
              .timeout(const Duration(seconds: 30));

          debugPrint('Retry response status: ${retry.statusCode}');
          debugPrint('Retry response body: ${retry.body}');

          if (retry.statusCode == 200) {
            final retryData = jsonDecode(retry.body);
            final retryUserData =
                retryData['nguoiDung'] ?? retryData['user'] ?? retryData;

            final retryUserJson = {
              'id': retryUserData['id'],
              'name': retryUserData['hoTen'] ?? retryUserData['name'] ?? '',
              'email': retryUserData['email'] ?? '',
              'mobile':
                  retryUserData['soDienThoai'] ?? retryUserData['mobile'] ?? '',
              'createdAt':
                  retryUserData['taoLuc'] ??
                  retryUserData['createdAt'] ??
                  DateTime.now().toIso8601String(),
              'updatedAt':
                  retryUserData['capNhatLuc'] ??
                  retryUserData['updatedAt'] ??
                  DateTime.now().toIso8601String(),
            };

            return User.fromJson(retryUserJson);
          }
        }
        throw Exception('Phi√™n ƒëƒÉng nh·∫≠p h·∫øt h·∫°n, vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i.');
      }

      final error = _extractError(response);
      throw Exception(error ?? 'L·∫•y th√¥ng tin ng∆∞·ªùi d√πng th·∫•t b·∫°i');
    } catch (e) {
      debugPrint('L·ªói getUserDetails: $e');
      throw Exception(_formatError(e));
    }
  }

  /// L√†m m·ªõi access token
  static Future<bool> _refreshToken() async {
    try {
      final prefs = await SharedPreferences.getInstance();
      final refreshToken = prefs.getString('refresh_token');
      debugPrint('Refresh token: ${refreshToken != null ? 'c√≥' : 'kh√¥ng'}');

      if (refreshToken == null) return false;

      final response = await http
          .post(
            Uri.parse('${getBaseUrl()}/refresh'),
            headers: await _getHeaders(),
            body: jsonEncode({'refreshToken': refreshToken}),
          )
          .timeout(const Duration(seconds: 30));

      debugPrint('Refresh response status: ${response.statusCode}');
      debugPrint('Refresh response body: ${response.body}');

      if (response.statusCode == 200) {
        final data = jsonDecode(response.body);
        await prefs.setString('access_token', data['accessToken']);
        debugPrint('‚úÖ ƒê√£ c·∫≠p nh·∫≠t access token m·ªõi');
        return true;
      }
      return false;
    } catch (e) {
      debugPrint('L·ªói refresh token: $e');
      return false;
    }
  }

  /// ƒêƒÉng xu·∫•t
  static Future<bool> logout() async {
    debugPrint('G·ªçi API logout...');
    try {
      await http
          .post(
            Uri.parse('${getBaseUrl()}/logout'),
            headers: await _getHeaders(needsAuth: true),
          )
          .timeout(const Duration(seconds: 10));
      debugPrint('‚úÖ API logout th√†nh c√¥ng');
    } catch (e) {
      debugPrint('‚ö†Ô∏è L·ªói khi g·ªçi API logout (b·ªè qua): $e');
    } finally {
      final prefs = await SharedPreferences.getInstance();
      await prefs.remove('access_token');
      await prefs.remove('refresh_token');
      debugPrint('ƒê√£ x√≥a tokens kh·ªèi SharedPreferences');
    }
    return true;
  }

  /// Ki·ªÉm tra k·∫øt n·ªëi server
  static Future<bool> checkConnection() async {
    final url = '${getBaseUrl()}/health';
    debugPrint('Ki·ªÉm tra k·∫øt n·ªëi: $url');
    try {
      final response = await http
          .get(Uri.parse(url), headers: await _getHeaders())
          .timeout(const Duration(seconds: 10));

      debugPrint('Health check status: ${response.statusCode}');
      return response.statusCode == 200;
    } catch (e) {
      debugPrint('K·∫øt n·ªëi th·∫•t b·∫°i: $e');
      return false;
    }
  }

  /// Tr√≠ch xu·∫•t l·ªói t·ª´ response API
  static String? _extractError(http.Response response) {
    try {
      final data = jsonDecode(response.body);
      return data['message'] ?? data['thongBao'] ?? data['loi'];
    } catch (_) {
      return null;
    }
  }

  /// Chu·∫©n h√≥a th√¥ng b√°o l·ªói
  static String _formatError(dynamic error) {
    String msg = error.toString();
    if (msg.startsWith('Exception: ')) msg = msg.substring(11);
    return msg;
  }
}

/// Exception cho timeout
class TimeoutException implements Exception {
  final String message;
  TimeoutException(this.message);

  @override
  String toString() => message;
}
